AWSTemplateFormatVersion: "2010-09-09"
Description: CSYE 6225 IAC 
# Create VPC
Parameters:
  VpcCidr:
    Description: "IP Range for this VPC"
    Type: String
    Default: "10.0.0.0/16"
  # Parameters for public Subnets
  PublicSubnet1CIDR:
    Description: "IP Range for this subnet"
    Type: String
    Default: "10.0.0.0/24"
  PublicSubnet2CIDR:
    Description: "IP Range for this subnet"
    Type: String
    Default: "10.0.1.0/24"
  PublicSubnet3CIDR:
    Description: "IP Range for this subnet"
    Type: String
    Default: "10.0.2.0/24"
  PrivateSubnet1CIDR:
    Description: "IP Range for this subnet"
    Type: String
    Default: "10.0.3.0/24"
  PrivateSubnet2CIDR:
    Description: "IP Range for this subnet"
    Type: String
    Default: "10.0.4.0/24"
  PrivateSubnet3CIDR:
    Description: "IP Range for this subnet"
    Type: String
    Default: "10.0.5.0/24"
  PublicRouteCidrBlock:
    Description: "Route to open Internet Access"
    Type: String
    Default: "0.0.0.0/0"
  az1:
    Description: "Region 1"
    Type: Number
    Default: 0 
  az2:
    Description: "Region 2"
    Type: Number
    Default: 1 
  az3:
    Description: "Region 3"
    Type: Number
    Default: 2 
  DBName:
    Description: DB Instance Name
    Type: String
    Default: csye6225 
  DBUserName:
    Description: DB Instance UserName
    Type: String
    Default: newuser
  DBPassword:
    Description: DB Instance Password
    Type: String
    Default: newpassword
  BucketName:
    Description: domain Name for S3 Bucket Naming
    Type: String
    Default: "csye6225"

  KeyName:
    Description: amazon security key
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  
  InstanceType:
    Description: ec2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [t2.micro]
    ConstraintDescription: must be a valid EC2 instance type.

  LatestAmiId:
    Description: Select the AMI
    Type:  String
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  
  RootVolumeSize:
    Description: Give the storage Size
    Type:  Number
    Default: 20

  RootVolumeType:
    Description: Give the storage type
    Type:  String
    Default: gp2

  ACCESSSECRET:
    Description: access secret
    Type:  String
    Default: 1zyUWXb4s0JcHYq8PhveBnd3nPXFQ5Ya3pG9Qiho

  ACCESSKEY:
    Description: access key
    Type:  String
    Default: AKIAZPZ5TTYLTOPYRKE5

  S3BucketName:
    Description: S3 Bucket Name
    Type: String
    Default: parth-csye-neu 

  envName:
    Description: Environment Name
    Type: String
    Default: dev 

  HostedZoneName:
    Description: "Name of the hosted zone"
    Type: String
    Default: "dev.parthk117.me."          

Resources:
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC               

  # Internet Gateway
  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-IGW       

  #Attaching VPC to Internet Gateway
  myVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref myInternetGateway
      VpcId: !Ref myVPC        

  #Creating 3 public subnets in 3 different availability zones
  myPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true      
      AvailabilityZone: !Select [!Ref az1,!GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet1    

  myPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true      
      AvailabilityZone: !Select [!Ref az2,!GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet2    

  myPublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref PublicSubnet3CIDR
      MapPublicIpOnLaunch: true      
      AvailabilityZone: !Select [!Ref az3,!GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet3     

  #Creating 3 private subnets in 3 different availability zones
  myPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [!Ref az1,!GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnet1    

  myPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [!Ref az2,!GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnet2 

  myPrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref PrivateSubnet3CIDR
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [!Ref az3,!GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnet3 

  #Creating Route Table
  myPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicRouteTable

  myPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateRouteTable 

  myDefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: myVPCGatewayAttachment
    Properties:
      RouteTableId: !Ref myPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref myInternetGateway                

  #Associate public route tables with subnets
  myPublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myPublicRouteTable
      SubnetId: !Ref myPublicSubnet1    

  myPublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myPublicRouteTable
      SubnetId: !Ref myPublicSubnet2

  myPublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myPublicRouteTable
      SubnetId: !Ref myPublicSubnet2               

  #Associate private route tables with subnets
  myPrivateubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myPrivateRouteTable
      SubnetId: !Ref myPrivateSubnet1   

  myPrivateubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myPrivateRouteTable
      SubnetId: !Ref myPrivateSubnet2 

  myPrivateubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myPrivateRouteTable
      SubnetId: !Ref myPrivateSubnet3               

  myDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet Group for RDS instances
      SubnetIds:
        - !Ref myPrivateSubnet1
        - !Ref myPrivateSubnet2
        - !Ref myPrivateSubnet3        

  #Security Group for ec2 instance
  myInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: applicationSecurityGroup
      GroupDescription: Allow http/https/ssh connection to EC2 Instance
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
        - IpProtocol: tcp
          FromPort: '3000'
          ToPort: '3000'
          SourceSecurityGroupId: !GetAtt myloadbalancerSecurityGroup.GroupId

  #Security Group for database
  myDBSecurityGroup:
    DependsOn:  
      - myPrivateSubnet1
      - myPrivateSubnet2
      - myPrivateSubnet3
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: databaseSecurityGroup
      GroupDescription: Allows connection to Database
      VpcId: !Ref myVPC
      SecurityGroupIngress:
      - SourceSecurityGroupId: !Ref myInstanceSecurityGroup
        IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306            

  #S3 bucket config
  myS3bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ['', [!Ref S3BucketName,'.',!Ref envName,'.parth.me' ]]
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'aws:kms'
      LifecycleConfiguration:
        Rules:
          - Id: LifeCycleRule
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
            ExpirationInDays: 60            

  # myEC2Instance:
  #   Type: AWS::EC2::Instance
  #   Properties:
  #     BlockDeviceMappings:
  #       - DeviceName: /dev/sdm
  #         Ebs:
  #           VolumeSize: !Ref RootVolumeSize
  #           VolumeType: !Ref RootVolumeType
  #           DeleteOnTermination: true
  #     InstanceType: !Ref InstanceType
  #     ImageId: !Ref LatestAmiId
  #     SecurityGroupIds:
  #       - !Ref myInstanceSecurityGroup
  #     SubnetId: !Ref myPublicSubnet1
  #     IamInstanceProfile: !Ref myEC2InstanceProfile
  #     UserData:
  #       Fn::Base64:
  #         !Sub |
  #           #!/bin/bash
  #           cat > /etc/environment << 'EOF'
  #             export user=${DBUserName}
  #             export password=${DBPassword}
  #             export database=${DBName}
  #             export host=${myRDSInstance.Endpoint.Address}
  #             export REGION=${AWS::Region}
  #             export BUCKET="${S3BucketName}.${envName}.parth.me"
  #           EOF
  #           sudo iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 3000
  #           sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
  #               -a fetch-config \
  #               -m ec2 \
  #               -c file:/home/ubuntu/webapp/statsd/config.json \
  #               -s
  #           cd ~/webapp
  #           cd ~
  #           sudo systemctl stop webapp
  #           sudo systemctl daemon-reload
  #           sudo systemctl start webapp
  #           sudo systemctl status webapp
  #           sudo systemctl enable webapp
  #     Tags:
  #       - Key: EC2
  #         Value: ApplicationServer

  myRDSParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties: 
      Description: RDS parameter Group
      Family: mysql8.0
      Parameters: 
        sql_mode: IGNORE_SPACE
      Tags: 
        - Key: Name
          Value: !Ref AWS::StackName     

  myRDSInstance:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    Properties:
      Engine: MySQL
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      MultiAZ: false
      KmsKeyId: !Ref myRDSKey    
      StorageEncrypted: true        
      DBInstanceIdentifier: !Ref DBName
      MasterUsername: !Ref DBUserName
      MasterUserPassword: !Ref DBPassword
      DBSubnetGroupName: !Ref myDBSubnetGroup
      PubliclyAccessible: false
      DBName: !Ref DBName
      DBParameterGroupName: !Ref myRDSParameterGroup
      VPCSecurityGroups:
        - !Ref myDBSecurityGroup  
  
  myWebAppS3IAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EC2-CSYE6225
      Description: IAM Role for WebApp and S3
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /      

  myWebAppS3IAMPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: WebAppS3
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
            - 's3:PutObject'
            - 's3:GetObject'
            - 's3:DeleteObject'
            - 's3:ListBucket'
            Resource: 
                  - !Join ['', [!GetAtt 'myS3bucket.Arn' ]]
                  - !Join ['', [!GetAtt 'myS3bucket.Arn','/*' ]]         
      Roles:
      - !Ref myWebAppS3IAMRole  

  myCloudWatchAgentPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: EC2CloudWatchPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 'cloudwatch:PutMetricData'
              - 'ec2:DescribeVolumes'
              - 'ec2:DescribeTags'
              - 'logs:PutLogEvents'
              - 'logs:DescribeLogStreams'
              - 'logs:DescribeLogGroups'
              - 'logs:CreateLogStream'
              - 'logs:CreateLogGroup'
            Resource: "*"
          - Effect: Allow
            Action:
              - 'ssm:GetParameter'
            Resource: "arn:aws:ssm:*:*:parameter/AmazonCloudWatch-*"
      Roles:
      - !Ref myWebAppS3IAMRole     

  myEC2InstanceProfile: 
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      InstanceProfileName: EC2InstanceProfile
      Path: "/"
      Roles:
      - !Ref myWebAppS3IAMRole       

  # myRoute53RecordSet:
  #   Type: AWS::Route53::RecordSet
  #   Properties:
  #     HostedZoneName: !Ref HostedZoneName
  #     Name: !Ref HostedZoneName
  #     ResourceRecords:
  #       - !GetAtt myEC2Instance.PublicIp
  #     TTL: 60
  #     Type: A
  #     AliasTarget:
  #       HostedZoneId: !GetAtt "EC2LoadBalancer.CanonicalHostedZoneID"
  #       DNSName: !GetAtt "EC2LoadBalancer.DNSName" 

  myRoute53RecordSet:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Ref HostedZoneName
      RecordSets:
        - Name: !Ref HostedZoneName
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt "myEC2LoadBalancer.CanonicalHostedZoneID"
            DNSName: !GetAtt "myEC2LoadBalancer.DNSName"      

# Creating SNS topic for triggering lambda function
  mySNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: verify_email
      DisplayName: verify_email #for sms
      Subscription:
        - Protocol: lambda
          Endpoint: !GetAtt myLambdaFunction.Arn      

# Attaching policy to the instance's role to provide instance with permission to publish in sns 
  mySNSPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: myApplicationSNSPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - sns:Publish
            Resource:
              - !Ref mySNSTopic
      Roles:
        - !Ref myWebAppS3IAMRole    

# Creating lambda function and putting hello world inline code as place holder
  myLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt myLambdaRole.Arn
      Runtime: nodejs12.x
      Handler: index.handler
      Code:
        ZipFile: |
          console.log('In Lambda function');
          exports.handler=function(event,context,callback){
            console.log('Message from SNS');
          };
      Description: Function to store token in dynamodb and send email
      FunctionName: emailVerify  

# Attaching role and policy to lambda for ses,sns and cloudwatch access
  myLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"      
        - "arn:aws:iam::aws:policy/AmazonSESFullAccess"
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaRole"
        - "arn:aws:iam::aws:policy/AmazonSNSFullAccess"
      Path: "/"         

# To give sns permission to invoke lambda function
  myLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt myLambdaFunction.Arn
      Principal: "sns.amazonaws.com"
      SourceArn: !Ref mySNSTopic        

# Creating dynamo db table for emailID and token
  myDynamoDBUsernameTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "EmailID"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "EmailID"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
      TableName: "myDynamoUsernameTable"   

  myDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "TokenName"
          AttributeType: "S"
      ProvisionedThroughput:
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
      KeySchema:
        - AttributeName: "TokenName"
          KeyType: "HASH"
      TableName: "myDynamoTokenTable"
      TimeToLiveSpecification:
        AttributeName: TimeToLive
        Enabled: true  

# Attaching dynamo db policy to ec2 instance so that instance can read write token in dynamo db
  myDynamoDBPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: DynamoPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 'dynamodb:List*'
              - 'dynamodb:DescribeTimeToLive'              
              - 'dynamodb:DescribeReservedCapacity*'
              - 'dynamodb:DescribeLimits'
            Resource: 
              - '*'
          - Effect: Allow
            Action:
              - 'dynamodb:DescribeTable'
              - 'dynamodb:Get*'
              - 'dynamodb:PutItem'
              - 'dynamodb:Query'
              - 'dynamodb:Scan'
              - 'dynamodb:Delete*'
              - 'dynamodb:BatchGet*'
              - 'dynamodb:CreateTable'
              - 'dynamodb:Update*'
            Resource:
              - !GetAtt myDynamoDBTable.Arn
      Roles:
        - !Ref myWebAppS3IAMRole        

# giving username dynamo db's permission to lambda function
  myUserNameDBPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "UserNameDBPolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 'dynamodb:List*'
              - 'dynamodb:DescribeReservedCapacity*'
              - 'dynamodb:DescribeTimeToLive'
              - 'dynamodb:DescribeLimits'
            Resource: 
              - '*'
          - Effect: Allow
            Action:
              - 'dynamodb:PutItem'
              - 'dynamodb:Get*'
              - 'dynamodb:Query'
              - 'dynamodb:Scan'
              - 'dynamodb:DescribeTable'              
              - 'dynamodb:Delete*'
              - 'dynamodb:BatchGet*'              
              - 'dynamodb:CreateTable'
              - 'dynamodb:Update*'
              - 'dynamodb:DescribeStream'
            Resource:
              - !GetAtt myDynamoDBUsernameTable.Arn
      Roles:
        - !Ref myLambdaRole        

# Create a security group for the load balancer to access the web application.
# Add ingress rule to allow TCP traffic on ports 80, and 443 from anywhere in the world.
  myloadbalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref myVPC
      GroupName: LBSecurityGroup1
      GroupDescription: "Security Group for Load Balancer"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0"

  myautoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: "myvpc-auto-Scaling-Group"
      AvailabilityZones:
        - !Select [0, !GetAZs '']
        - !Select [1, !GetAZs '']
        - !Select [2, !GetAZs '']
      TargetGroupARNs:
        - !Ref myEC2TargetGroupLB
      VPCZoneIdentifier:
        - !Ref myPublicSubnet1
        - !Ref myPublicSubnet2
        - !Ref myPublicSubnet3
      Cooldown: "60"
      MinSize: "1"
      MaxSize: "3"
      LaunchTemplate:
        LaunchTemplateId: !Ref asglaunchconfig
        Version: !GetAtt asglaunchconfig.LatestVersionNumber
      DesiredCapacity: "1"
      Tags:
        - Key: "Name"
          PropagateAtLaunch: true
          Value: "EC2AutoScalingGroup"  

  myUpScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref myautoScalingGroup
      ScalingAdjustment: 1

  myDownScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref myautoScalingGroup
      ScalingAdjustment: -1       

  myCPUUsageHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Trigger CPU alarm if threshold > 5
      AlarmName: CPU Alarm High
      Namespace: AWS/EC2
      AlarmActions:
        - !Ref myUpScalingPolicy
      MetricName: CPUUtilization
      Statistic: Average
      Period: "300"
      EvaluationPeriods: "1"
      Threshold: "5"
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref myautoScalingGroup

  myCPUUsageLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Trigger CPU alarm if threshold is < 3
      AlarmName: CPU Alarm Low
      Namespace: AWS/EC2
      AlarmActions:
        - !Ref myDownScalingPolicy
      MetricName: CPUUtilization
      Statistic: Average
      Period: "300"
      EvaluationPeriods: "1"
      Threshold: "3"
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref myautoScalingGroup         

  asglaunchconfig:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: "/dev/sdm"
            Ebs:
              VolumeType: !Ref RootVolumeType
              DeleteOnTermination: "true"
              VolumeSize: !Ref RootVolumeSize
              Encrypted: true
              KmsKeyId: !Ref myEBSkey
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            DeleteOnTermination: true
            Groups:
              - !Ref myInstanceSecurityGroup
        IamInstanceProfile: 
          Arn: !GetAtt
            - myEC2InstanceProfile
            - Arn
        ImageId: !Ref LatestAmiId
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyName
        UserData:
          Fn::Base64:
            !Sub |
              #!/bin/bash
              cat > /etc/environment << 'EOF'
                export user=${DBUserName}
                export password=${DBPassword}
                export database=${DBName}
                export host=${myRDSInstance.Endpoint.Address}
                export REGION=${AWS::Region}
                export BUCKET="${S3BucketName}.${envName}.parth.me"
              EOF
              sudo iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 3000
              sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
                  -a fetch-config \
                  -m ec2 \
                  -c file:/home/ubuntu/webapp/statsd/config.json \
                  -s
              cd ~/webapp
              cd ~
              sudo systemctl stop webapp
              sudo systemctl daemon-reload
              sudo systemctl start webapp
              sudo systemctl status webapp
              sudo systemctl enable webapp
   
  myEBSkey:
    Type: AWS::KMS::Key
    Properties:
      Description: A symmetric key for encryption of EBS
      KeyPolicy:
        Id: key-default-ebs
        Version: "2012-10-17"
        Statement:
          - Sid: Enabling Key to the resource
            Effect: Allow
            Principal:
              AWS:
                - arn:aws:iam::122596462960:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling
                - arn:aws:iam::122596462960:root
            Action: 'kms:*'
            Resource: '*'    

  myRDSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: A symmetric key for encryption of RDS
      KeyPolicy:
        Id: key-default-rds
        Version: "2012-10-17"
        Statement:
          - Sid: Enabling Key to the resource
            Effect: Allow
            Principal:
              AWS:
                - arn:aws:iam::122596462960:root
            Action: 'kms:*'
            Resource: '*'             
            
  myEC2LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: myVPCGatewayAttachment
    Properties:
      IpAddressType: ipv4
      Name: ApplicationLoadBalancer
      Scheme: internet-facing
      Subnets:
        - !Ref myPublicSubnet1
        - !Ref myPublicSubnet2
        - !Ref myPublicSubnet3
      SecurityGroups:
        - !GetAtt myloadbalancerSecurityGroup.GroupId
      Type: application    

  myEC2TargetGroupLB:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /healthz
      HealthCheckPort: 3000
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      Name: EC2AppTargetGroup
      Port: 3000
      Protocol: HTTP
      VpcId: !Ref myVPC
      TargetType: instance                           

  myEC2LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref myEC2LoadBalancer
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref myEC2TargetGroupLB
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: arn:aws:acm:us-east-1:122596462960:certificate/1259edaf-f46f-44ca-9e59-9a845cebebea